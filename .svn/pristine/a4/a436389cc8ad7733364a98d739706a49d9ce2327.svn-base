package it.mef.bilancio.demdec.manager.impl;

import it.almavivaitalia.bilancio.commons.bo.DocumentiBO;
import it.almavivaitalia.bilancio.commons.bo.FascicoliBO;
import it.almavivaitalia.bilancio.commons.bo.IterFirmaDecretoBO;
import it.almavivaitalia.bilancio.commons.bo.SottoFascicoliRedBO;
import it.almavivaitalia.bilancio.commons.manager.CronologicoManager;
import it.almavivaitalia.bilancio.commons.to.CroTransTO;
import it.mef.bilancio.demdec.dao.DocumentiDao;
import it.mef.bilancio.demdec.dao.FascicoloDao;
import it.mef.bilancio.demdec.dao.IterFirmaDecretoDao;
import it.mef.bilancio.demdec.dao.SottoFascicoliRedDao;
import it.mef.bilancio.demdec.manager.SospensioneFirmeManager;
import it.mef.bilancio.demdec.to.FascicoliTO;
import it.mef.bilancio.demdec.to.IterFirmaDecretoTO;
import it.mef.bilancio.demdec.utils.Constants;

import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

public class SospensioneFirmeManagerImpl extends AbstractDemManagerImpl implements SospensioneFirmeManager {

	
	@Autowired
	private FascicoloDao fascicoloDao;
	
	@Autowired
	private IterFirmaDecretoDao iterFirmaDecretoDao;
	
	@Autowired
	private DocumentiDao documentiDao;
	
	@Autowired
	private SottoFascicoliRedDao sottoFascicoliRedDao;
	
	@Autowired
	private CronologicoManager cronologicoManager;
	
	@Override
	public IterFirmaDecretoTO aggiornaStati(Long numeIdFascicolo, String utente, String funzione) throws Throwable {
		
		FascicoliBO boFascOld=fascicoloDao.loadById(numeIdFascicolo);
		FascicoliBO boFascNew=fascicoloDao.loadById(numeIdFascicolo);
		boFascNew.setRowUpdatedDttm(Calendar.getInstance().getTime());
		boFascNew.setRowUpdatedUser(utente);
		boFascNew.setRowUpdatedForm(funzione);
		boFascNew.setStatStato(3);
		fascicoloDao.saveOrUpdate(boFascNew);
		
		// Richiamo cronologico
		cronologicoManager.salvaCronologico(boFascOld,//old
									boFascNew,//new
									null,
									null,
									CroTransTO.CRO_TRANS_SOSPENSIONE_FIRME,
									Constants.FUNZIONE_SOSPENSIONE_FIRME,  
									boFascNew.getRowUpdatedUser()==null?boFascNew.getRowCreatedUser():boFascNew.getRowUpdatedUser());
		
		
		List<DocumentiBO> docBoList=documentiDao.findDocumentiByTipoFascicolo("AD01", Long.valueOf(numeIdFascicolo));
		List<DocumentiBO> docBoList2=documentiDao.findDocumentiByTipoFascicolo("AD01", Long.valueOf(numeIdFascicolo));
		DocumentiBO boDocOld=docBoList.get(0);
		DocumentiBO boDocNew=docBoList2.get(0);
		boDocNew.setRowUpdatedDttm(Calendar.getInstance().getTime());
		boDocNew.setRowUpdatedUser(utente);
		boDocNew.setRowUpdatedForm(funzione);
		boDocNew.setStatDocumento(3);
		documentiDao.saveOrUpdate(boDocNew);
		
		// Richiamo cronologico
		cronologicoManager.salvaCronologico(boDocOld,//old
									boDocNew,//new
									null,
									null,
									CroTransTO.CRO_TRANS_SOSPENSIONE_FIRME,
									Constants.FUNZIONE_SOSPENSIONE_FIRME, 
									boDocNew.getRowUpdatedUser()==null?boDocNew.getRowCreatedUser():boDocNew.getRowUpdatedUser());
		
		
		List<SottoFascicoliRedBO> boSottoFascListOld=sottoFascicoliRedDao.findByNumeIdFascicolo(numeIdFascicolo);
		List<SottoFascicoliRedBO> boSottoFascListNew=sottoFascicoliRedDao.findByNumeIdFascicolo(numeIdFascicolo);
		
		SottoFascicoliRedBO boOld=null;
		SottoFascicoliRedBO boNew=null;
		//aggiorniamo tutti i record che hanno questo numeIdFascicolo
		for (int i = 0; i < boSottoFascListNew.size(); i++) {
			boOld=boSottoFascListOld.get(i);
			boNew=boSottoFascListNew.get(i);
			boNew.setRowUpdatedDttm(Calendar.getInstance().getTime());
			boNew.setRowUpdatedUser(utente);
			boNew.setRowUpdatedForm(funzione);
			boNew.setStatStato(0);
			sottoFascicoliRedDao.update(boNew);
			
			// Richiamo cronologico
			cronologicoManager.salvaCronologico(boOld,//old
												boNew,//new
										null,
										null,
										CroTransTO.CRO_TRANS_SOSPENSIONE_FIRME,
										Constants.FUNZIONE_SOSPENSIONE_FIRME, 
										boNew.getRowUpdatedUser()==null?boNew.getRowCreatedUser():boNew.getRowUpdatedUser());
		}
		
		
		
		//aggiorniamo tutti i record che hanno questo numeIdFascicolo
//		for (SottoFascicoliRedBO sottoFascicoliRedBO : boSottoFascList) {
//			sottoFascicoliRedBO.setRowUpdatedDttm(Calendar.getInstance().getTime());
//			sottoFascicoliRedBO.setRowUpdatedUser(utente);
//			sottoFascicoliRedBO.setRowUpdatedForm(funzione);
//			sottoFascicoliRedBO.setStatStato(0);
//			sottoFascicoliRedDao.update(sottoFascicoliRedBO);
//		}
		
		IterFirmaDecretoBO boIfd=iterFirmaDecretoDao.getCurrentIFDByIdFascicolo(Long.valueOf(numeIdFascicolo));
		boIfd.setRowUpdatedDttm(Calendar.getInstance().getTime());
		boIfd.setRowUpdatedUser(utente);
		boIfd.setRowUpdatedForm(funzione);
		boIfd.setStatFirma("3");
		IterFirmaDecretoBO bo2=(IterFirmaDecretoBO)iterFirmaDecretoDao.saveOrUpdate(boIfd);
		
		// Richiamo cronologico
		cronologicoManager.salvaCronologico(null,//old
											bo2,//new
									null,
									null,
									CroTransTO.CRO_TRANS_SOSPENSIONE_FIRME,
									Constants.FUNZIONE_SOSPENSIONE_FIRME, 
									bo2.getRowUpdatedUser()==null?bo2.getRowCreatedUser():bo2.getRowUpdatedUser());
	 
		return getDozerDriver().map(bo2, IterFirmaDecretoTO.class, "IterFirmaDecreto");
	}

	@Override
	public FascicoliTO findFascicoloByAnnoTipoNum(Integer anno, Integer tipo, Integer numDec) throws Throwable {	
		FascicoliBO fascBo=fascicoloDao.findFascicoloByAnnoTipoNum(anno, tipo, numDec);
		if(fascBo!=null){
			return getDozerDriver().map(fascBo , FascicoliTO.class, "FascicoliFad");	
		}else{
			return null;
		}
	}
	
	
	
	

}
