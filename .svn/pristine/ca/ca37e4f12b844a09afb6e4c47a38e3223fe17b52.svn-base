package it.mef.bilancio.demdec.web.spring.controller.fascicolifad;

import it.almavivaitalia.bilancio.commons.to.AnagAmminDemTO;
import it.almavivaitalia.bilancio.commons.to.CodeDescriptionTO;
import it.almavivaitalia.bilancio.commons.to.DescDocumentoTO;
import it.almavivaitalia.bilancio.commons.utils.DateUtil;
import it.almavivaitalia.bilancio.commons.web.security.Utente;
import it.almavivaitalia.bsn.sh.paginator.Paginator;
import it.almavivaitalia.bsn.sh.utils.PaginatorUtil;
import it.almavivaitalia.bsn.sh.utils.ParseUtil;
import it.almavivaitalia.bsn.sh.utils.StringUtil;
import it.almavivaitalia.web.sh.utils.Context;
import it.mef.bilancio.demdec.manager.GestioneFadManager;
import it.mef.bilancio.demdec.manager.ListManager;
import it.mef.bilancio.demdec.manager.UploadDecManager;
import it.mef.bilancio.demdec.servizi.client.UtilRequestClient;
import it.mef.bilancio.demdec.servizi.to.DocumentContentTO;
import it.mef.bilancio.demdec.servizi.to.DocumentTO;
import it.mef.bilancio.demdec.servizi.to.EsitoTO;
import it.mef.bilancio.demdec.to.AmminRagDemTO;
import it.mef.bilancio.demdec.to.DocumentiTO;
import it.mef.bilancio.demdec.to.FascicoliTO;
import it.mef.bilancio.demdec.to.TipoDocumentoTO;
import it.mef.bilancio.demdec.utils.Constants;
import it.mef.bilancio.demdec.web.spring.form.GestioneFascicoloFadForm;
import it.mef.bilancio.demdec.web.spring.utils.NomeFunzioneConstants;
import it.mef.bilancio.demdec.web.spring.utils.WebConstants;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

//@RequestMapping(value = ConstantsRequestMapping.GESTIONE_FASCICOLO_F_A_D)
public class GestioneFascicoloFadGrandParentController extends ConsultaFascicoloFadController {
    
	@Autowired
	protected ListManager listManager; 
	
	@Autowired
	private GestioneFadManager gestioneFadManager;
	
	@Autowired
	private UploadDecManager uploadDecManager;

	private static ArrayList<String> allowedContentType;
	
	private String fascicoloFadView;
	private String selezioneAmmFadView;
	private String documentiFadView;
	private String documentiRedView;
	
	static{ // configurazione con tika parsers
		
		allowedContentType = new ArrayList<String>();
        allowedContentType.add("application/pdf");
        allowedContentType.add("application/jpeg");
        allowedContentType.add("application/pjpeg");
//      allowedContentType.add("application/xml");
        allowedContentType.add("application/x-tika-ooxml"); // nuovo office
        allowedContentType.add("application/x-tika-msoffice"); // vecchio office
        allowedContentType.add("application/vnd.openxmlformats-officedocument.wordprocessingml.document");
        allowedContentType.add("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        allowedContentType.add("application/msword");
        allowedContentType.add("application/vnd.ms-excel");
        allowedContentType.add("application/rtf");
        allowedContentType.add("image/x-ms-bmp");
        allowedContentType.add("image/tiff");
        allowedContentType.add("image/gif");
        allowedContentType.add("image/jpeg");
        
	}
	
	
	
	

	
	public void setDocumentiFadView(String documentiFadView) {
		this.documentiFadView = documentiFadView;
	}

	
	public void setFascicoloFadView(String fascicoloFadView) {
		this.fascicoloFadView = fascicoloFadView;
	}
	
	public void setSelezioneAmmFadView(String selezioneAmmFadView) {
		this.selezioneAmmFadView = selezioneAmmFadView;
	}
	
	public void setDocumentiRedView(String documentiRedView) {
		this.documentiRedView = documentiRedView;
	}



	public ListManager getListManager() {
		return listManager;
	}



	public GestioneFadManager getGestioneFadManager() {
		return gestioneFadManager;
	}



	public UploadDecManager getUploadDecManager() {
		return uploadDecManager;
	}



	public static ArrayList<String> getAllowedContentType() {
		return allowedContentType;
	}



//	public static HashMap<String, String> getContentTypeExtensions() {
//		return contentTypeExtensions;
//	}



	public String getFascicoloFadView() {
		return fascicoloFadView;
	}



	public String getSelezioneAmmFadView() {
		return selezioneAmmFadView;
	}



	public String getDocumentiFadView() {
		return documentiFadView;
	}



	public String getDocumentiRedView() {
		return documentiRedView;
	}


	protected DocumentTO popolaDocumentTO( Context context,FascicoliTO fascicoloTO,AnagAmminDemTO amm,GestioneFascicoloFadForm form,String fileName, String contentType) throws Throwable{
			
			DocumentTO docTo= new DocumentTO();
	//		DocumentFileTO docFile= new DocumentFileTO();
	//		docTo.setIdDocumento("2");// potrebbero restituirlo loro il GUID
			
			docTo.setIdFascicolo(fascicoloTO/*.getId()*/.getCodiGuidFascicolo().toString());// me lo passa gestione FAD come querystring o lo prendo dalla combo
			
			TipoDocumentoTO descDocTo=uploadDecManager.loadTipoDocById(form.getTipoDoc()); //((List<TipoDocumentoTO>)listManager.loadTipoDocumentoAD()).get(Integer.parseInt(form.getTipoDoc()));//gestioneFadManager.loadDescDocById(Integer.parseInt(form.getTipoDoc()));
			CodeDescriptionTO descDoc= new CodeDescriptionTO();
			descDoc.setCode(descDocTo.getId());
			descDoc.setDescription(descDocTo.getDescDescrizioneDoc());
			docTo.setTipoDocumento(descDoc);
			docTo.setAttivo(true);
			docTo.setCondivisibile(true);
			
			//controllo su visibilità del documento
			if(fascicoloTO.getFlagVisibilitaCdc01() == 1)
				docTo.setDaInviare(true);
			else
				docTo.setDaInviare(false);
			
			DocumentContentTO dc= new DocumentContentTO();
			dc.setContent(form.getUpFile().getBytes());
			dc.setDescrizione(form.getDesc());//TODO
			dc.setFileName(fileName);
			dc.setMimeType(contentType);
			dc.setHash(UtilRequestClient.createHash(form.getUpFile().getBytes()));
			docTo.setDocumentoContent(dc);
			
			
			CodeDescriptionTO ammDescTo= new CodeDescriptionTO();
			
			if(amm != null){
				ammDescTo.setCode(amm.getId().getAmmin());
				ammDescTo.setDescription(amm.getDescAmm());
			}
			else {
				ammDescTo.setCode("999");
				ammDescTo.setDescription("999");
			}
			docTo.setAmministrazione(ammDescTo);
			docTo.setDataDocumento(DateUtil.getSysDate(Constants.DATE_SEPARATOR));
			
			CodeDescriptionTO ucbRts= new CodeDescriptionTO();
			
			if(amm != null){
				AmminRagDemTO rag = gestioneFadManager.findAmminRagDemByAnagAmminDemTO(amm);
				String r=StringUtils.leftPad(rag.getId().getNumeRag(), 4,Constants.PADDING_CHAR );
				ucbRts.setCode(r);
				ucbRts.setDescription(r);
			}
			else{
				ucbRts.setCode("");
				ucbRts.setDescription("");
			}
			
			docTo.setUcbRts(ucbRts);
	//		docTo.setDescrizione("upload");
			
			context.valorizeAudit(docTo, "gestioneFascicoloFAD");
			return docTo;
		}
	
	
	
	
	public String onModificaMetadatiDocFad(Context context) throws Throwable{
		
		GestioneFascicoloFadForm form = context.getForm();
		
		
		int lunghezzaModaleUpdFadDesc = form.getModaleUpdFadDesc().length();
		//eliminiamo ultimo carattere relativo alla visibilità Cdc 
		//impostata nella modale per il javascript 0=non visibile - 1=visibile
		form.setModaleUpdFadDesc(form.getModaleUpdFadDesc().substring(0,lunghezzaModaleUpdFadDesc - 1));
		
		//questo per sicurezza - si può anche levare
		if(form.getModaleUpdFadVisibilita().endsWith(","))
			form.setModaleUpdFadVisibilita(form.getModaleUpdFadVisibilita().substring(0, form.getModaleUpdFadVisibilita().length() - 1));
		
		//quando il valore è disabled nella modale prende sia il valore di partenza(seguita da una ",")
		//sia il valore che gli viene passato dal javascript
		if(form.getModaleUpdFadVisibilita().contains(","))
			form.setModaleUpdFadVisibilita(form.getModaleUpdFadVisibilita().substring(form.getModaleUpdFadVisibilita().lastIndexOf(",") +1 , form.getModaleUpdFadVisibilita().length()));
			
		
		FascicoliTO to = (FascicoliTO)context.getModel(FASCICOLO_SELEZIONATO);
		EsitoTO esito = null;
		
		// Campi di audit
		Utente u= getUtenteInSessione();
		
		FascicoliTO fascicoloTO = new FascicoliTO();
		fascicoloTO.setId(to.getId());
		fascicoloTO.setCodiGuidFascicolo(to.getCodiGuidFascicolo());
		fascicoloTO.setDocumentiList(new ArrayList<DocumentiTO>());
		fascicoloTO.setRowUpdatedUser(u.getUtente().getCodiUtente());
		fascicoloTO.setRowUpdatedDttm(Calendar.getInstance().getTime());
		fascicoloTO.setRowUpdatedForm(NomeFunzioneConstants.GESTIONE_FASCICOLO);
		
		fascicoloTO.setDescUtenteModifica(u.getUtente().getCodiUtente());
		fascicoloTO.setDataModificaFascicolo(Calendar.getInstance().getTime());
		
//		List<DocumentiTO> listDocAttoDecreto = context.getModel(LIST_DOCUMENTI_FAD);
		
		// Reperimento documento Selezionato
		DocumentiTO docSelezionatoTO = (DocumentiTO)context.getModel(DOCUMENTO_FAD);
		boolean modifica = false;
//		boolean modificaTipo = false;
		
		// Controllo del tipo documento se di tipo AD01 e con
		// stato diverso da 0 si inibisce la cancellazione
		if( (docSelezionatoTO.getTipoDocumento().getId().equalsIgnoreCase(Constants.TIPO_ATTO_DECRETO) && 
		     docSelezionatoTO.getStatDocumento().equals(Integer.parseInt(Constants.DOC_FAD_STAT_DOCUMENTO_ZERO)) ) ||
		     (!docSelezionatoTO.getTipoDocumento().getId().equalsIgnoreCase(Constants.TIPO_ATTO_DECRETO))
		     
		  ){
		
			if( docSelezionatoTO.getAnagAmminDem() == null ||
//					!form.getModaleUpdFadAmm().equals(docSelezionatoTO.getAnagAmminDem().getAmminWithDesc()) ||
				    (docSelezionatoTO.getTextDescrizione() != null && !form.getModaleUpdFadDesc().equals(docSelezionatoTO.getTextDescrizione()) ) //||
	//			   !docSelezionatoTO.getFlagVisibilitaCdc01().equals(form.getModaleUpdFadVisibilita())
						){
					
					String ammSelezionata = form.getModaleUpdFadAmm();
					
					if(ammSelezionata != null && !"".equals(ammSelezionata)){
						List<AnagAmminDemTO> ammList = context.getModel(WebConstants.LIST_AMMIN_DEM);
						
						for(AnagAmminDemTO amm : ammList){
							
							if(amm.getAmminWithDesc().equalsIgnoreCase(ammSelezionata)){
								docSelezionatoTO.setAnagAmminDem(amm);
								break;
							}
						}
					}
					List<DescDocumentoTO> listaDescDocumenti = listManager.loadDescDocumentoByTipo(docSelezionatoTO.getTipoDocumento().getId());
					for(DescDocumentoTO descDocumento : listaDescDocumenti){
						if(descDocumento.getId().equals(form.getModaleUpdFadDesc())){
							DescDocumentoTO descDocTo = new DescDocumentoTO();
							descDocTo.setId(descDocumento.getId());
							descDocTo.setTextDescrizione(descDocumento.getTextDescrizione());
							
							//aggiunto dopo modifiche visibilitaCdc01
							descDocTo.setFlagVisibilitaCdc(Integer.parseInt(form.getModaleUpdFadVisibilita()));
							
							docSelezionatoTO.setDescDocumento(descDocTo);
							
							//aggiunto dopo modifiche visibilitaCdc01
						//	docSelezionatoTO.setdescVisibilitaCDC01 non c'è...solo get
							docSelezionatoTO.setFlagVisibilitaCdc01(Integer.parseInt(form.getModaleUpdFadVisibilita()));
							
							
							
							//docSelezionatoTO.setDescDocumento(descDocumento);
							break;
						}
					}
					
//					docSelezionatoTO.setTextDescrizione(form.getModaleUpdFadDesc());
					docSelezionatoTO.setTextDescrizione(docSelezionatoTO.getDescDocumento().getTextDescrizione());
					
					
					
					modifica = true;
					
	//				docSelezionatoTO.setAnagAmminDem(((List<AnagAmminDemTO>)context.getModel(WebConstants.LIST_AMMIN_DEM)).get(Integer.parseInt(form.getModaleUpdFadAmm())));
//					fascicoloTO.getDocumentiList().clear();	
				}
			if(!docSelezionatoTO.getTipoDocumento().getId().equals(form.getModaleUpdFadTipoDoc())){
				
				// Valorizzo con nuovo tipo documento
				List<TipoDocumentoTO> listTipo = getListManager().loadTipoDocumentoAD();
				for(TipoDocumentoTO tipoDoc : listTipo){
					if(tipoDoc.getId().equals(form.getModaleUpdRedTipoDoc())){
						docSelezionatoTO.setTipoDocumento(tipoDoc);
					}
				}
//				fascicoloTO.getDocumentiList().clear();	
//				modificaTipo = true;
			}
			fascicoloTO.getDocumentiList().add(docSelezionatoTO);
			
			//aggiunto dopo modifica visibilitaCdc in modale
			fascicoloTO.setFlagVisibilitaCdc01(Integer.parseInt(form.getModaleUpdFadVisibilita()));
			
			/*if (modificaTipo) {
				esito = getGestioneFadManager().reinserisciDocumentoFAD(fascicoloTO);
			} else*/ 
			if (modifica){
				esito = getGestioneFadManager().modificaDocumentoFAD(fascicoloTO);
			}
//			fascicoloTO.getDocumentiList().clear();				
			
			// Setting attributi documento modificati
//			docSelezionatoTO.setTextDescrizione(form.getModaleUpdFadDesc());
//			docSelezionatoTO.setFlagVisibilitaCdc01(Integer.getInteger(form.getModaleUpdFadVisibilita()));
			
			// Controllo variazione tipo documento
				// Controllo altri elementi variati
				else { //  nessuna variazione
					System.out.println("NON CI SONO MODIFICHE DA SALVARE");
					esito = new EsitoTO();
					esito.setCodice("NULL");
					esito.setDescrizione("Non ci sono modifiche da salvare.");
				}
				
			// Gestione messaggistica
			if(esito!=null && esito.getCodice().equals("OK")){
				//ricarico il fascicolo per vedere subito la modifica effettuata
				FascicoliTO toFasc= gestioneFadManager.getFascicoloFad(ParseUtil.getLong(fascicoloTO.getId()));
				if (!StringUtil.isEmpty(toFasc.getDocumentiList())){
					//imposto il nome del file trasformato
					for (DocumentiTO doc : toFasc.getDocumentiList()) {
						if(doc.getDescFilename()!=null){
							doc.setDescFilenameTrasf(doc.getDescFilename()+".pdf");
						}
					}
				}
				context.setDataModel(FASCICOLO_SELEZIONATO, toFasc);	
				PaginatorUtil.addPaginator(context, toFasc.getDocumentiList(), LIST_DOCUMENTI_FAD, Paginator.PAGE_RANGE_15, DOCUMENTI_FAD_PAGINATOR);
				context.addInfo("info.update.success", new String[]{});
			}else if(esito!=null && esito.getCodice().equals("NULL")){
				context.addWarning("error.generic","Non ci sono modifiche da salvare.");
			}else if (esito!=null){
				if (StringUtil.isEmpty(esito.getErrors())){
					context.addError("error.generic",esito.getDescrizione());
				} else {
					String detail = "";
					for(String error:esito.getErrors()){
						detail += detail.isEmpty()?": ":" - ";
						detail += error;
					}
					context.addError("error.generic1", esito.getDescrizione(),detail);
				}
			} else {
				context.addError("error.generic", new String[]{"Errore in fase di salvataggio modifiche."});
			}
		
		}
		else {
			context.addError("error.upload.documenti.stato","");
		}
			
		return getDocumentiFadView();
	}

}
