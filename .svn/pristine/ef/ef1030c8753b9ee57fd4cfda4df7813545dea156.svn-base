package it.mef.bilancio.demdec.dao.impl;

import java.util.List;

import org.hibernate.CacheMode;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;

import it.almavivaitalia.bilancio.commons.bo.DescDocumentoBO;
import it.almavivaitalia.bilancio.commons.bo.DocumentiBO;
import it.almavivaitalia.bilancio.commons.web.security.Utente;
import it.mef.bilancio.demdec.dao.DocumentiDao;
import it.mef.bilancio.demdec.to.DocumentiViewTO;


public class DocumentiDaoImpl extends AbstractDemDaoImpl<DocumentiBO> implements DocumentiDao{

	@SuppressWarnings("unchecked")
	@Override
	public List<DocumentiViewTO> loadADToSignByLoggedUser(Utente utente)
			throws Throwable {
		
		Query query=getNamedQuery("DocumentiBO.loadAllDocumentsToSignByLoggedUser");
		query.setParameter("user", utente.getUtente().getId());
		query.setParameter("profile", utente.getProfiloInUso().getCodiProfilo());
		List<DocumentiViewTO> listAttoDecreto = query.setResultTransformer(Transformers.aliasToBean(DocumentiViewTO.class )).setCacheMode(CacheMode.GET).list();
		
		return listAttoDecreto;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<DocumentiViewTO> loadADToSignOrVerifyByLoggedUser(Utente utente, String signOrVerify) 
			throws Throwable {
		
		Query query=getNamedQuery("DocumentiBO.loadAllDocumentsToSignOrVerifyByLoggedUser");
		query.setParameter("user", utente.getUtente().getId());
		query.setParameter("profile", utente.getProfiloInUso().getCodiProfilo());
		query.setParameter("signOrVerify", signOrVerify);
		List<DocumentiViewTO> listAttoDecreto = query.setResultTransformer(Transformers.aliasToBean(DocumentiViewTO.class )).setCacheMode(CacheMode.GET).list();
		
		return listAttoDecreto;
	}
	
	@Override
	public Long createNextIdDocumento(Long numFasc){
	  Query q = createQuery("select nvl(max(d.id.numeIdDocumento),0) + 1 from DocumentiBO d where  d.id.fkNumeIdFascicolo= :numFasc ");
	  q.setLong("numFasc", numFasc);
	  return (Long)q.uniqueResult();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DocumentiBO> findDocumentiByTipoFascicolo(String tipo , Long idFasc)	throws Throwable {
		String q=
				" from DocumentiBO bo "+
						" where tipoDocumento.id = :tipo and fascicoli.id= :idFasc  "
						+ "order by fascicoli.id";

		Query query = createQuery(q);
		query.setString("tipo", tipo);
		query.setLong("idFasc", idFasc);
		return (List<DocumentiBO> ) query.list();
	}
	
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<DocumentiBO> getDocumentiByIdFadFlgVisCdc( Long idFasc, Long flgVisibilitaCdc)	throws Throwable {
		String q=
				" from DocumentiBO bo "+
						" where  fascicoli.id= :idFasc  and flagVisibilitaCdc01= :flgVisibilitaCdc "
						+ " order by fascicoli.id ";

		Query query = createQuery(q);
		
		query.setLong("idFasc", idFasc);
		query.setLong("flgVisibilitaCdc", flgVisibilitaCdc);
		
		return (List<DocumentiBO> ) query.list();
	}
	
	@Override
	public List<DescDocumentoBO> getDescDocumentiByTipoDocumento(String tipoDocumento) throws Throwable{
		String q=
				" from DescDocumentoBO bo "+
						" where  codiTipoDocumento = :tipoDocumento";

		Query query = createQuery(q);
		
		query.setString("tipoDocumento", tipoDocumento);
		
		return (List<DescDocumentoBO> ) query.list();
	}	

	

}
