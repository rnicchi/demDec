package it.mef.bilancio.demdec.manager.impl;

import it.almavivaitalia.bilancio.commons.bo.LettereIgbBO;
import it.almavivaitalia.bilancio.commons.to.AnagAmminDemTO;
import it.mef.bilancio.demdec.dao.AnagAmminDemDao;
import it.mef.bilancio.demdec.dao.FascicoloDao;
import it.mef.bilancio.demdec.dao.LettereIgbDao;
import it.mef.bilancio.demdec.dao.LettereTestiDao;
import it.mef.bilancio.demdec.dao.LettereTestiPersDao;
import it.mef.bilancio.demdec.manager.LetterePreRegManager;
import it.mef.bilancio.demdec.to.FascicoliFadSearhTO;
import it.mef.bilancio.demdec.to.FascicoliTO;
import it.mef.bilancio.demdec.to.LettereIgbTO;

import java.math.BigDecimal;
import java.sql.Blob;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;


public abstract class LetterePreRegParentManagerImpl extends AbstractDemManagerImpl implements LetterePreRegManager{
	
	@Autowired
	FascicoloDao fascicoloDao;
	
	@Autowired
	AnagAmminDemDao anagAmminDemDao;
	
	@Autowired
	LettereTestiDao lettereTestiDao;
	
	@Autowired
	LettereIgbDao lettereIgbDao;
	
	@Autowired
	LettereTestiPersDao lettereTestiPersDao;
	
	@Override
	public List<FascicoliTO> findFascicoliFadLetterePreReg(FascicoliFadSearhTO to) throws Throwable {
		List<FascicoliTO> ret = getDozerDriver().mapList(fascicoloDao.findFascicoliFadLetterePreReg(to), FascicoliTO.class, "FascicoliFad");
		return ret;

	}
	
	@Override
	public List<AnagAmminDemTO> findAmministrazioniByIdFascicolo(Long idFascicolo)  throws Throwable{
		List<AnagAmminDemTO> listBO=anagAmminDemDao.findAmministrazioniByIdFascicolo(idFascicolo);
		return listBO;
		
	}

	@Override
	public String[] getLettereTestiByTipo(String tipoLettera) throws Throwable {
		return lettereTestiDao.getLettereTestiByTipo(tipoLettera);
	}

	@Override
	public String[] getLettereTestiByTipoBalanced(String tipoLettera) throws Throwable {
		return lettereTestiDao.getLettereTestiByTipoBalanced(tipoLettera);
	}
	
	@Override
	public LettereIgbTO getLetteraById(Long idLettera)  throws Throwable {
		
		LettereIgbBO bo=lettereIgbDao.loadById(idLettera);
		LettereIgbTO to=getDozerDriver().map(bo, LettereIgbTO.class, "LettereIgb");
		return to;
	}
	
	
	@Override
	public Blob getBlobByIdLettera(BigDecimal id) throws Throwable {
		// TODO Auto-generated method stub
		return lettereIgbDao.getBlobByIdLettera(id);
	}

	@Override
	public LettereIgbBO findByUK(LettereIgbTO lettera){
		LettereIgbBO bo=getDozerDriver().map(lettera, LettereIgbBO.class, "LettereIgb");
		
		LettereIgbBO old = lettereIgbDao.findByUK(bo.getFascicoli().getId(), bo.getAnagAmminDem().getId().getFkAnnoEse(), bo.getAnagAmminDem().getId().getNumeStp(), bo.getAnagAmminDem().getId().getNumeApp());
		
		return old;
	}
	

}
