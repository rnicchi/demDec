package it.almavivaitalia.bilancio.commons.to;

// Generated 25-gen-2010 16.15.19 by Hibernate Tools 3.2.4.GA




import java.util.ArrayList;
import java.util.List;

/**
 * Menu generated by hbm2java
 */
public class MenuTO extends AbstractCommonTO implements java.io.Serializable {

	private Long id;
	private String codiMenu;
	private List<ItemTO> itemList = new ArrayList<ItemTO>(0);
	private String descCodiMenu;
	private String flagMenuPrincipale;
	private String numeSequence;

	public MenuTO() {
	}

	public MenuTO(String codiMenu) {
		this.codiMenu = codiMenu;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getCodiMenu() {
		return this.codiMenu;
	}

	public void setCodiMenu(String codiMenu) {
		this.codiMenu = codiMenu;
	}

	public List<ItemTO> getItemList() {
		return itemList;
	}

	public void setItemList(List<ItemTO> itemList) {
		this.itemList = itemList;
	}

	public String getDescCodiMenu() {
		return descCodiMenu;
	}

	public void setDescCodiMenu(String descCodiMenu) {
		this.descCodiMenu = descCodiMenu;
	}

	public String getFlagMenuPrincipale() {
		return flagMenuPrincipale;
	}

	public void setFlagMenuPrincipale(String flagMenuPrincipale) {
		this.flagMenuPrincipale = flagMenuPrincipale;
	}

	public String getNumeSequence() {
		return numeSequence;
	}

	public void setNumeSequence(String numeSequence) {
		this.numeSequence = numeSequence;
	}

	/**
	 * toString
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("sequIdMenu").append("='").append(getId()).append("' ");
		buffer.append("codiMenu").append("='").append(getCodiMenu())
				.append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof MenuTO))
			return false;
		MenuTO castOther = (MenuTO) other;

		return ((this.getId() == castOther.getId()) || (this.getId() != null
				&& castOther.getId() != null && this.getId().equals(
				castOther.getId())))
				&& ((this.getCodiMenu() == castOther.getCodiMenu()) || (this
						.getCodiMenu() != null
						&& castOther.getCodiMenu() != null && this
						.getCodiMenu().equals(castOther.getCodiMenu())));
	}

	public int hashCode() {
		int result = 17;

		result = 37 * result + (getId() == null ? 0 : this.getId().hashCode());
		result = 37 * result
				+ (getCodiMenu() == null ? 0 : this.getCodiMenu().hashCode());

		return result;
	}

	// The following is extra code specified in the hbm.xml files
	private static final long serialVersionUID = 1L;

	// end of extra code specified in the hbm.xml files

	// ADDED BUSINESS LOGIC

	public void addItem(ItemTO item) {
		item.getMenuList().add(this);
		getItemList().add(item);
	}

	private List<ProfiloTO> profiloList = new ArrayList<ProfiloTO>(0);

	// fa il merge delle due liste profilo
	private void inheritProfiloList(ItemTO item) throws Throwable {
		for (ProfiloTO profiloTO : item.getProfiloList()) {
			if (!profiloList.contains(profiloTO)) {
				profiloList.add(profiloTO);
			}
		}
	}

	// innesca l'ereditarietà dei profili (buildReverseProfiloList) a partire
	// dagli item foglia
	private static void startReverseProfiloListOnItem(ItemTO itemTO)
			throws Throwable {
		if (itemTO.getItemList().isEmpty()) {
			buildReverseProfiloList(itemTO);
		} else {
			for (ItemTO itemChild : itemTO.getItemList()) {
				startReverseProfiloListOnItem(itemChild);
			}
		}
	}

	// popola (parzialmente) la lista profili da un item figlio verso il padre
	// (il figlio fa ereditare al padre i suoi profili)
	private static void buildReverseProfiloList(ItemTO last) throws Throwable {
		// aggiungo alla lista i profili dell'action puntata dall'item
		if (last.getAction() != null) {
			last.setProfiloList(last.getAction().getProfiloList());
		}
		if (last.getItem() != null) {
			last.getItem().inheritProfiloList(last);
			buildReverseProfiloList(last.getItem());
		}

	}

	public void buildProfiloList() throws Throwable {
		for (ItemTO itemTO : itemList) {
			startReverseProfiloListOnItem(itemTO);
			inheritProfiloList(itemTO);
		}
	}

	public List<ProfiloTO> getProfiloList() {
		return profiloList;
	}

	public void setProfiloList(List<ProfiloTO> profiloList) {
		this.profiloList = profiloList;
	}

	public boolean checkPermission(String codiProfilo) {
		ProfiloTO profilo = new ProfiloTO();
		profilo.setCodiProfilo(codiProfilo);
		return profiloList.contains(profilo);
	}

	public boolean checkPermission(Integer sequIdProfilo) {
		ProfiloTO profilo = new ProfiloTO();
		profilo.setId(sequIdProfilo);
		return profiloList.contains(profilo);
	}
}
