package it.mef.bilancio.demdec.web.spring.controller.fascicolifad;

import it.almavivaitalia.bilancio.commons.manager.UtenteManager;
import it.almavivaitalia.bilancio.commons.to.EmailUtenteTO;
import it.almavivaitalia.bilancio.commons.to.EserciziTO;
import it.almavivaitalia.web.sh.utils.Context;
import it.mef.bilancio.demdec.manager.InvioAlleFirmeManager;
import it.mef.bilancio.demdec.manager.ListManager;
import it.mef.bilancio.demdec.manager.MailManager;
import it.mef.bilancio.demdec.manager.RevocaSospensioneFirmeManager;
import it.mef.bilancio.demdec.manager.RicercaRedManager;
import it.mef.bilancio.demdec.servizi.client.DEMBILConstants;
import it.mef.bilancio.demdec.servizi.client.ResponseDEMBILClient;
import it.mef.bilancio.demdec.to.AnagTipoDecretoTO;
import it.mef.bilancio.demdec.to.FascicoliTO;
import it.mef.bilancio.demdec.to.IterFirmaDecretoTO;
import it.mef.bilancio.demdec.to.PecMessaggiInviatiTO;
import it.mef.bilancio.demdec.utils.Constants;
import it.mef.bilancio.demdec.web.spring.controller.AbstractDemFormController;
import it.mef.bilancio.demdec.web.spring.form.RevocaSospensioneFirmeForm;
import it.mef.bilancio.demdec.web.spring.utils.ConstantsRequestMapping;
import it.mef.bilancio.demdec.web.spring.utils.NomeFunzioneConstants;
import it.mef.bilancio.demdec.web.spring.utils.SessionAttributes;
import it.mef.bilancio.demdec.web.spring.utils.WebConstants;

import java.util.List;

import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;

@RequestMapping(value = ConstantsRequestMapping.REVOCA_SOSPENSIONE_FIRME)
public class RevocaSospensioneFirmeController extends AbstractDemFormController implements WebConstants, SessionAttributes{
	
	private String startView;
	
	@Autowired
	private ListManager listManager;
	
	@Autowired
	private RicercaRedManager ricercaRedManager;
	
	@Autowired
	private RevocaSospensioneFirmeManager revocaSospensioneFirmeManager;
	
	@Autowired
	private UtenteManager utenteManager;
	
	@Autowired
	private MailManager mailManager;
	
	@Autowired
	private InvioAlleFirmeManager invioAlleFirmeManager;
	
	@Override
	public String startController(Context context) throws Throwable {
		
		context.setCurrentNode("DemDec.menu.RevSospFirma");
		
		List<AnagTipoDecretoTO> listaTipiDecreti=listManager.loadAnagTipoDecreto();
		context.setDataModel(WebConstants.LIST_TIPI_DECRETI, listaTipiDecreti );
	
		List<EserciziTO> listEsercizi=listManager.loadEserciziDemCG();
		context.setDataModel(WebConstants.LIST_ANNO_ESE, listEsercizi );
		
		return startView;
	}	
	
	
	public String pulisci(Context context) throws Throwable {
		
	RevocaSospensioneFirmeForm form= (RevocaSospensioneFirmeForm) context.getForm();
		
		form.setAnnoEse(null);
		form.setNumero(null);
		form.setTipoFlusso(null);
		
		List<AnagTipoDecretoTO> listaTipiDecreti=listManager.loadAnagTipoDecreto();
		context.setDataModel(WebConstants.LIST_TIPI_DECRETI, listaTipiDecreti );
	
		List<EserciziTO> listEsercizi=listManager.loadEserciziDemCG();
		context.setDataModel(WebConstants.LIST_ANNO_ESE, listEsercizi );
		
		return startView;
	}
	

		public String  revocaSospensioneFirme(Context context) throws Throwable{
			
			RevocaSospensioneFirmeForm form= (RevocaSospensioneFirmeForm) context.getForm();
			
			if(!form.isValid()){		
				return startView;
			}
			
			String tipoFlusso=form.getTipoFlusso();
			String anno=form.getAnnoEse();
			String numero=form.getNumero();
		
		   Integer anno2=null;
		   Integer numero2=null;
		   Integer tipoFlusso2=null;
		   
		   if(tipoFlusso==null || tipoFlusso.equals("")){
			   tipoFlusso2=null;
		   }
		   if(anno==null || anno.equals("")){
			   anno2=null;
		   }
		   if(numero==null || numero.equals("")){
			   numero2=null;
		   }
		   
		   try{
			   anno2=new Integer(anno);
			  
		   }catch (NumberFormatException exc){
			   
		   }
		   try{
			   numero2=new Integer(numero);
		   }catch (NumberFormatException exc){
			 
		   }
		   try{
			   tipoFlusso2=new Integer(tipoFlusso);
		   }catch (NumberFormatException exc){
			   
		   }
		   
			
			FascicoliTO fascicoloTo=revocaSospensioneFirmeManager.findFascicoloByAnnoTipoNum(anno2, tipoFlusso2, numero2);
			if(fascicoloTo==null ){
				context.addWarning("info.noDataFound");
				return startView;
			}
			
			Long numeIdFascicolo=fascicoloTo.getId();
	
			ResponseDEMBILClient responseChangeStatoFascicolo= invioAlleFirmeManager.wsChangeStatoFascicoloAttoDecreto(fascicoloTo.getCodiGuidFascicolo(), Constants.STATO_FAD_IN_ELABORAZIONE);
			if(!responseChangeStatoFascicolo.getEsitoTo().getCodice().equalsIgnoreCase(DEMBILConstants.ESITO_OK)){
//				String errore = responseChangeStatoFascicolo.getEsitoTo().getDescrizione();
//				throw new Exception(errore);
				context.addError("error.generic", responseChangeStatoFascicolo.getEsitoTo().getDescrizione());
				return startView;
			}else{
				
				IterFirmaDecretoTO  ifdTo= revocaSospensioneFirmeManager.aggiornaStati(numeIdFascicolo,getUtenteInSessione().getUtente().getCodiUtente(), NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME);
				
				/**invio e-mail**/
				String email = utenteManager.findEmailSignatoryNextByStatFirmaAndIdFascicolo(Constants.STATO_FIRMA_IN_FIRMA, numeIdFascicolo);
				MimeMessage message = null;
				
				if((ifdTo.getAnagFirmatari().getFlagPec01() == HAVE_PEC)){
					message = mailManager.invioPecDaFunzione(NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME, getUtenteInSessione(), email, fascicoloTo.getDescSigla()+" - "+numero2+" - "+anno2 );
				}else{
					message = mailManager.invioPeoDaFunzione(NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME, getUtenteInSessione(), email, fascicoloTo.getDescSigla()+" - "+numero2+" - "+anno2 );
				}
				
				
				/**invio la mail a tutti i firmatari che hanno stato "2" sulla tabella d_iter_firma_decreto, per questo fascicolo**/
				List<EmailUtenteTO> emailS= utenteManager.findEmailUserFlgPecStatIdFasc(Constants.STATO_FIRMA_FIRMATO, numeIdFascicolo);
				
				for (int i = 0; i < emailS.size(); i++) {
					if(emailS.get(i).getFlagEmailPec() == HAVE_PEC){
						message = mailManager.invioPecDaFunzione(NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME, getUtenteInSessione(), emailS.get(i).getEmailUtente(), fascicoloTo.getDescSigla()+" - "+numero2+" - "+anno2 );
					}else{
						message = mailManager.invioPeoDaFunzione(NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME, getUtenteInSessione(), emailS.get(i).getEmailUtente(), fascicoloTo.getDescSigla()+" - "+numero2+" - "+anno2);
					}
				}
				
				
				if(message != null){
					PecMessaggiInviatiTO messageToSave = mailManager.createMessageToSave(message, NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME);
					context.valorizeAuditCreated(messageToSave, NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME);
					context.valorizeAuditUpdated(messageToSave, NomeFunzioneConstants.REVOCA_SOSPENSIONE_FIRME);
					mailManager.salvaMessaggioInviato(messageToSave, getUtenteInSessione());
					context.addInfo("info.doc.suspensionSignaturesRevoked.and.msg.sent",  email);
				}else{
					context.addInfo("info.doc.suspensionSignaturesRevoked");
					context.addWarning("warning.email.revsosp.not.sent", email);
				}
			
			}
			
			return startView;
		}
		
		public void setStartView(String startView) {
			this.startView = startView;
		}


}
