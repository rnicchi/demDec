package it.mef.bilancio.demdec.manager.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import it.almavivaitalia.bilancio.commons.bo.AnagAmminDemBO;
import it.almavivaitalia.bilancio.commons.bo.AnagAmminDemBOId;
import it.almavivaitalia.bilancio.commons.bo.AnagUfficiBO;
import it.almavivaitalia.bilancio.commons.bo.ProfiloBO;
import it.almavivaitalia.bilancio.commons.bo.UtenteBO;
import it.almavivaitalia.bilancio.commons.bo.UtenteProfiloBO;
import it.almavivaitalia.bilancio.commons.bo.UtenteProfiloBOId;
import it.almavivaitalia.bilancio.commons.dao.ProfiloDao;
import it.almavivaitalia.bilancio.commons.dao.UtenteDao;
import it.almavivaitalia.bilancio.commons.dao.UtenteProfiloDao;
import it.almavivaitalia.bilancio.commons.to.UtenteProfiloTO;
import it.almavivaitalia.bilancio.commons.to.UtenteTO;
import it.mef.bilancio.demdec.enums.TipoResponse;
import it.mef.bilancio.demdec.manager.GestioneUtentiManager;
import it.mef.bilancio.demdec.to.ManagerResponseTO;

public class GestioneUtentiManagerImpl extends AbstractDemManagerImpl implements GestioneUtentiManager{

	@Autowired
	private ProfiloDao profiloDao;
	@Autowired
	private UtenteDao utenteDao;
	@Autowired
	private UtenteProfiloDao utenteProfiloDao;

	@Override
	public ManagerResponseTO<UtenteTO> creaUtente(UtenteTO utenteTO) throws Throwable {

		UtenteBO utenteBO = utenteDao.loadByCodiUtente(utenteTO.getCodiUtente());
		if (utenteBO != null)
			return new ManagerResponseTO<UtenteTO>(TipoResponse.ERROR, "errore.utente.codice.presente", utenteTO);
		return salvaUtente(utenteTO);
	}

	@Override
	public ManagerResponseTO<UtenteTO> salvaUtente(UtenteTO utenteTO) {

		UtenteBO utenteBO = getUtenteBO(utenteTO);
		UtenteBO utBoNew = utenteDao.saveOrUpdate(utenteBO);

		if (utBoNew != null) {
			for (UtenteProfiloBO utenteProfiloBo: utBoNew.getUtenteProfiloList())
				utenteProfiloDao.saveOrUpdate(utenteProfiloBo);

			return  new ManagerResponseTO<UtenteTO>(TipoResponse.INFO, "info.insert.success", (UtenteTO) getDozerDriver().map(utBoNew, UtenteTO.class, "Utente"));
		}

		return new ManagerResponseTO<UtenteTO>(TipoResponse.WARN, "warning.noinsert");
	}

	@Override
	public List<UtenteTO> caricaTuttiUtenti() throws Throwable {
		return getDozerDriver().mapList(utenteDao.loadAll(), UtenteTO.class, "Utente");
	}

	//copia i campi del TO nel BO e crea un nuovo id
	private UtenteBO getUtenteBO(UtenteTO utenteTo) {

		UtenteBO utenteBO = 
				(UtenteBO) getDozerDriver().map(utenteTo, UtenteBO.class, "Utente");

		utenteBO.setId(utenteDao.newId());

		//ricava Profili
		Integer idProfilo = null;
		//set lista Utente-Profilo
		utenteBO.setUtenteProfiloList(new ArrayList<UtenteProfiloBO>());
		for (int i=0; i < utenteTo.getUtenteProfiloList().size(); i++) {
			idProfilo = utenteTo.getUtenteProfiloList().get(i).getProfilo().getId();
			ProfiloBO profiloBo = profiloDao.loadById(ProfiloBO.class, idProfilo);

			UtenteProfiloBO utenteProfiloBO = getUtenteProfiloBO(
					utenteTo.getUtenteProfiloList().get(i), 
					utenteBO, 
					profiloBo, 
					i+1	//il progressivo parte da 1
			);
			utenteBO.getUtenteProfiloList().add(utenteProfiloBO);
		}

		return utenteBO;
	}

	//copia i campi del TO nel BO e crea un nuovo id
	private UtenteProfiloBO getUtenteProfiloBO(UtenteProfiloTO utenteProfiloTO, UtenteBO utenteBo, ProfiloBO profiloBo, int progressivo) {

		UtenteProfiloBO utenteProfiloBo =
					(UtenteProfiloBO) getDozerDriver().map(utenteProfiloTO, UtenteProfiloBO.class, "Utente");
		UtenteProfiloBOId utenteProfiloBOId = 
				new UtenteProfiloBOId(new BigDecimal(utenteBo.getId()), new BigDecimal(profiloBo.getId()), new BigDecimal(progressivo));
		utenteProfiloBo.setId(utenteProfiloBOId);
		utenteProfiloBo.setUtente(utenteBo);
		utenteProfiloBo.setProfilo(profiloBo);

		if (utenteProfiloTO.getAnagUffici() != null) {
			AnagUfficiBO uffBo = new AnagUfficiBO();
			uffBo.setId(utenteProfiloTO.getAnagUffici().getId());
			//uffBo.setDescUfficio(utenteProfiloTO.getAnagUffici().getDescUfficio());
			utenteProfiloBo.setAnagUffici(uffBo);
		}

		if (utenteProfiloTO.getAnagAmminDem() != null) {
			AnagAmminDemBO ammBo = new AnagAmminDemBO();
			AnagAmminDemBOId ammBoId = new AnagAmminDemBOId();
			ammBoId.setFkAnnoEse(utenteProfiloTO.getAnagAmminDem().getId().getFkAnnoEse());
			ammBoId.setNumeStp(utenteProfiloTO.getAnagAmminDem().getId().getNumeStp());
			ammBoId.setNumeApp(utenteProfiloTO.getAnagAmminDem().getId().getNumeApp());
			ammBo.setId(ammBoId);

			utenteProfiloBo.setAnagAmminDem(ammBo);
		}

		utenteProfiloBo.setFlagFirma01(1);
		utenteProfiloBo.setFlagModifica01(1);

		copyAudit(utenteProfiloTO, utenteProfiloBo);

		return utenteProfiloBo;
	}


}
